@page "/fetchdata"
@inject HttpClient Http
@using WeatherForecastSvc.Endpoint.Dto
@using System.ComponentModel.DataAnnotations
@using System.Net

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

@if (cities == null)
{
    <p><em>Loading...</em></p>
}
else if (errorType != null)
{
    switch (errorType)
    {
        case ErrorType.Unknown:
            <p><em>Произошла неизвестная ошибка</em></p>
            break;
        case ErrorType.DataNotFound:
            <p><em>Данные не найдены, попробуйте выбрать другую дату</em></p>
            break;
    }
}
else
{
    <EditForm EditContext="@editContext">
        <p>
            <label>
                Город:
                <InputSelect @bind-Value="request.CityName" class="form-control mb-2 mr-sm-2">
                    <option value="">Выберите город</option>
                    @foreach (var item in cities)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                </InputSelect>
            </label>
            
            <ValidationMessage For="() => request.CityName" />
        </p>
        <p>
            <label>
                Дата:
                <InputDate @bind-Value="request.Date"
                           DisplayName="Дата" class="form-control mb-2 mr-sm-2"/>
            </label>
            
            <ValidationMessage For="() => request.Date" />
        </p>
    </EditForm>

    <button class="btn btn-primary" @onclick="FetchForecast">Запросить</button>

    <table class="table">
        <thead>
            <tr>
                <th>Дата</th>
                <th>Описание</th>
                <th>Мин. температура, C</th>
                <th>Макс. температура, C</th>
                <th>Скорость ветра, м/с</th>
                <th>Осадки, мм</th>
            </tr>
        </thead>
        <tbody>
            
            @if (forecast != null)
            { 
            <tr>
                <td>@forecast.Date.ToString("dd.MM.yyyy")</td>
                <td>@forecast.Summary</td>
                <td>@forecast.MinTempC</td>
                <td>@forecast.MaxTempC</td>
                <td>@forecast.WindMs</td>
                <td>@forecast.PrecipitationMm</td>
            </tr>
            }
            
        </tbody>
    </table>
}

@code {
    private DateForecastDto? forecast;
    private ForecastRequest request = new();
    private CityDto[]? cities;
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private ErrorType? errorType;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(request);
        messageStore = new(editContext);

        cities = await Http.GetFromJsonAsync<CityDto[]>("/metadata/cities");
    }

    private async Task FetchForecast()
    {
        bool hasErrors = false;
        messageStore?.Clear();
        
        if (string.IsNullOrWhiteSpace(request.CityName))
        {
            messageStore?.Add(() => request.CityName, "Выберите город.");
            hasErrors = true;
        }

        var today = DateTime.UtcNow.Date;
        const int maxDays = 10;
        if (request.Date < DateTime.UtcNow.Date)
        {
            messageStore?.Add(() => request.Date, "Исторические данные о погоде не доступны.");
            request.Date = today;
            hasErrors = true;
        }
        if (request.Date > today.AddDays(maxDays))
        {
            messageStore?.Add(() => request.Date, $"Прогноз погоды доступен за {maxDays} дней.");
            request.Date = today.AddDays(maxDays);
            hasErrors = true;
        }
        if (hasErrors)
        {
            return;
        }

        try
        {
            forecast = await Http.GetFromJsonAsync<DateForecastDto>("/forecast?cityName=" + request.CityName + "&date=" + request.Date);

        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == HttpStatusCode.NotFound)
        {
            errorType = ErrorType.DataNotFound;
        }
        catch (Exception ex)
        {
            errorType = ErrorType.Unknown;
        }
    }

    public class ForecastRequest
    {
        public DateTime Date { get; set; } = DateTime.UtcNow.Date;
        [Required]
        public string CityName { get; set; }
    }

    public enum ErrorType
    {
        Unknown = 1,
        DataNotFound = 2
    }

}
